// Generated by CoffeeScript 1.8.0
(function() {
  var Terrain, flatten;

  flatten = require('lodash.flatten');

  module.exports = Terrain = (function() {
    var average;

    average = function(values) {
      var total, valid;
      valid = values.filter(function(val) {
        return val !== -1;
      });
      total = valid.reduce((function(sum, val) {
        return sum + val;
      }), 0);
      return total / valid.length;
    };

    function Terrain(detail, roughness) {
      this.roughness = roughness;
      this.size = Math.pow(2, detail) + 1;
      this.max = this.size - 1;
      this.map = new Float32Array(this.size * this.size);
    }

    Terrain.prototype.get = function(x, y) {
      if (x < 0 || x > this.max || y < 0 || y > this.max) {
        return -1;
      }
      return this.map[x + this.size * y];
    };

    Terrain.prototype.set = function(x, y, val) {
      return this.map[x + this.size * y] = val;
    };

    Terrain.prototype.generate = function() {
      this.set(0, 0, this.max);
      this.set(this.max, 0, this.max / 2);
      this.set(this.max, this.max, 0);
      this.set(0, this.max, this.max / 2);
      return this._divide(this.max);
    };

    Terrain.prototype._divide = function(size) {
      var half, scale, x, y, _ref;
      _ref = [], x = _ref[0], y = _ref[1];
      half = size / 2;
      scale = this.roughness * size;
      if (half < 1) {
        return;
      }
      y = half;
      while ((y += size) < this.max) {
        x = half;
        while ((x += size) < this.max) {
          this._square(x, y, half, Math.random() * scale * 2 - scale);
        }
      }
      y = 0;
      while ((y += size) < this.max) {
        x = (y + half) % size;
        while ((x += size) < this.max) {
          this._diamond(x, y, half, Math.random() * scale * 2 - scale);
        }
      }
      return this._divide(size / 2);
    };

    Terrain.prototype._square = function(x, y, size, offset) {
      var ave;
      ave = average([this.get(x - size, y - size), this.get(x + size, y - size), this.get(x + size, y + size), this.get(x - size, y + size)]);
      return this.set(x, y, ave + offset);
    };

    Terrain.prototype._diamond = function(x, y, size, offset) {
      var ave;
      ave = average([this.get(x, y - size), this.get(x + size, y), this.get(x, y + size), this.get(x - size, y)]);
      return this.set(x, y, ave + offset);
    };

    Terrain.prototype.to2dArray = function() {
      var x, y, _i, _ref, _results;
      _results = [];
      for (y = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = this.size; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push({
              x: x,
              y: y,
              val: this.get(x, y)
            });
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Terrain.prototype.toArray = function() {
      return flatten(this.to2dArray());
    };

    return Terrain;

  })();

}).call(this);
